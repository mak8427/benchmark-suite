name: ci.yml
on:
  # Run on every commit to any branch
  push:
  pull_request:
  schedule:
    # Run dependency updates weekly
    - cron: '0 2 * * 1'


jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-3.12-${{ hashFiles('**/src/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-3.12-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r src/requirements.txt
          pip install pytest-cov pytest-xdist

      - name: Install pre-commit hooks
        run: |
          pip install pre-commit
          pre-commit install

      - name: Run linting
        run: |
          pre-commit run --all-files || true

      - name: Run unit tests with coverage
        run: |
          python -m pytest tests/ -v --tb=short --cov=src --cov-report=xml --cov-report=term-missing

      - name: Run linting
        run: |
          pre-commit run --all-files || true


  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r src/requirements.txt
        pip install build twine

    - name: Build package
      run: |
        pip install -e .

    - name: Build distributions
      run: |
        rm -rf dist build *.egg-info
        python -m build  # creates dist/*.tar.gz and dist/*.whl

    - name: Check distributions with twine
      run: twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-3.12-${{ github.sha }}
        path: dist/

  dependency-update:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install pip-tools
      run: |
        pip install pip-tools

    - name: Check for outdated dependencies
      run: |
        pip list --outdated --format=freeze > outdated.txt || true
        if [ -s outdated.txt ]; then
          echo "Outdated dependencies found:"
          cat outdated.txt
          exit 1
        fi

  autofix:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - uses: actions/setup-python@v4
        with: { python-version: "3.12" }
      - run: pip install pre-commit && pre-commit run -a || true
      - name: Commit & push changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: auto-format [skip ci]"
          branch: ${{ github.head_ref || github.ref_name }}
          file_pattern: "*.py"

  cli-slurm:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
        ports:
          - "8888:3306"
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    steps:
      - uses: actions/checkout@v3

      - uses: koesterlab/setup-slurm-action@v1
      - name: Smoke test
        run: squeue && sinfo && sbatch --version

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r src/requirements.txt
          pip install build twine pytest

      - name: Build package
        run: |
          pip install -e .

      - name: list
        run: |
          benchwrap list

      - name: Create test SLURM job
        run: |
          # Create a simple test benchmark for CI
          mkdir -p /tmp/slurm_test
          cat > /tmp/slurm_test/simple_benchmark.py << 'EOF'
          #!/usr/bin/env python3
          import time
          import os
          
          print("Starting simple benchmark test...")
          print(f"Job ID: {os.environ.get('SLURM_JOB_ID', 'N/A')}")
          print(f"Node list: {os.environ.get('SLURM_JOB_NODELIST', 'N/A')}")
          
          # Simple computation to simulate work
          result = sum(i**2 for i in range(1000))
          print(f"Computation result: {result}")
          
          # Simulate some processing time
          time.sleep(2)
          
          print("Benchmark test completed successfully")
          EOF
          
          chmod +x /tmp/slurm_test/simple_benchmark.py

      - name: Test SLURM job submission and execution
        run: |
          # Create a simple SLURM script for testing
          cat > /tmp/test_job.sh << 'EOF'
          #!/bin/bash
          #SBATCH --job-name=ci-test
          #SBATCH --nodes=1
          #SBATCH --ntasks=1
          #SBATCH --cpus-per-task=1
          #SBATCH --time=00:02:00
          #SBATCH --output=/tmp/slurm_output_%j.out
          #SBATCH --error=/tmp/slurm_error_%j.err
          
          echo "SLURM job started at $(date)"
          echo "Job ID: $SLURM_JOB_ID"
          echo "Node: $SLURM_JOB_NODELIST"
          
          python3 /tmp/slurm_test/simple_benchmark.py
          
          echo "SLURM job completed at $(date)"
          EOF
          
          chmod +x /tmp/test_job.sh
          
          # Submit the job and capture job ID
          echo "Submitting SLURM test job..."
          JOB_ID=$(sbatch --parsable /tmp/test_job.sh)
          echo "Submitted job with ID: $JOB_ID"
          
          # Wait for job to complete (with timeout)
          echo "Waiting for job to complete..."
          timeout=60
          elapsed=0
          while [ $elapsed -lt $timeout ]; do
            if squeue -j $JOB_ID 2>/dev/null | grep -q $JOB_ID; then
              echo "Job $JOB_ID is still running..."
              sleep 5
              elapsed=$((elapsed + 5))
            else
              echo "Job $JOB_ID has completed"
              break
            fi
          done
          
          if [ $elapsed -ge $timeout ]; then
            echo "ERROR: Job did not complete within timeout"
            squeue -j $JOB_ID || echo "Job not found in queue"
            exit 1
          fi
          
          # Check job status
          echo "Checking job status..."
          sacct -j $JOB_ID --format=JobID,JobName,State,ExitCode,Elapsed,CPUTime || echo "sacct failed, continuing..."
          
          # Verify output files exist and contain expected content
          if [ -f "/tmp/slurm_output_${JOB_ID}.out" ]; then
            echo "=== Job Output ==="
            cat "/tmp/slurm_output_${JOB_ID}.out"
          else
            echo "ERROR: Output file not found"
            exit 1
          fi
          
          if [ -f "/tmp/slurm_error_${JOB_ID}.err" ]; then
            echo "=== Job Errors ==="
            cat "/tmp/slurm_error_${JOB_ID}.err"
          fi
          
          # Verify the output contains expected content
          if grep -q "Benchmark test completed successfully" "/tmp/slurm_output_${JOB_ID}.out"; then
            echo "✓ SLURM job executed successfully and produced expected output"
          else
            echo "ERROR: Expected output not found in job output"
            exit 1
          fi

      - name: Test benchmark suite SLURM integration
        run: |
          # Test that the benchmark suite can handle SLURM environments
          echo "Testing benchmark suite SLURM detection..."
          
          # Test listing benchmarks
          benchwrap list
          
          # Run SLURM-specific pytest tests
          echo "Running SLURM integration tests..."
          python -m pytest tests/test_slurm.py -v --tb=short
          
          echo "✓ SLURM integration tests completed"



