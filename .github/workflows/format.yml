name: Auto-format

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

env:
  PYTHON_VERSION: "3.12"

jobs:
  auto-format:
    name: Auto-format Code
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' || 
      (github.event_name == 'pull_request' && 
       github.event.pull_request.head.repo.full_name == github.repository)

    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install formatting tools
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit==3.5.0

      - name: Run auto-formatting
        run: |
          echo "Running auto-formatting with project pre-commit config..."
          pre-commit run --all-files || echo "Some files were formatted"

      - name: Check for changes (excluding workflows)
        id: verify-changed-files
        run: |
          CHANGED_FILES=$(git status --porcelain | grep -v "^.* \.github/workflows/" || true)
          
          if [ -n "$CHANGED_FILES" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Non-workflow files were auto-formatted:"
            echo "$CHANGED_FILES"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "No formatting changes needed (excluding workflows)"
          fi

      - name: Commit formatting changes (excluding workflows)
        if: steps.verify-changed-files.outputs.changed == 'true'
        run: |
          echo "Committing non-workflow formatting changes..."
          
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          
          # Add all changes first
          git add .
          # Reset workflow files to unstage them
          git reset -- .github/workflows/
          
          if git diff --cached --quiet; then
            echo "No changes to commit after excluding workflows"
            exit 0
          fi
          
          git commit -m "style: auto-format code (excluding workflows) [skip ci]"
          
          BRANCH_NAME="${{ github.head_ref || github.ref_name }}"
          
          for i in {1..3}; do
            echo "Attempt $i to push changes..."
            if git push origin "$BRANCH_NAME"; then
              echo "Successfully pushed formatting changes!"
              break
            elif [ $i -eq 3 ]; then
              echo "Failed to push after 3 attempts"
              exit 1
            else
              echo "Push failed, syncing and retrying..."
              git fetch origin "$BRANCH_NAME"
              
              # Check if there are any unstaged changes before rebasing
              if ! git diff --quiet || ! git diff --cached --quiet; then
                echo "Unstaged changes detected, stashing them..."
                git stash push -m "Auto-stash before rebase"
                HAS_STASH=true
              else
                HAS_STASH=false
              fi
              
              # Try to rebase, fall back to merge if it fails
              if git rebase "origin/$BRANCH_NAME"; then
                echo "Rebase successful"
              else
                echo "Rebase failed, falling back to merge"
                git rebase --abort 2>/dev/null || true
                git merge "origin/$BRANCH_NAME" --no-edit
              fi
              
              # Restore stashed changes if any
              if [ "$HAS_STASH" = true ]; then
                echo "Restoring stashed changes..."
                git stash pop || {
                  echo "Failed to restore stash, continuing without it"
                  git stash drop 2>/dev/null || true
                }
              fi
            fi
          done
```I can see the issue with your GitHub workflow - it's failing because Git cannot rebase when there are unstaged changes, specifically to the workflow files themselves. The error "cannot rebase: You have unstaged changes" occurs because the workflow is trying to rebase while having uncommitted changes.

Here's the fixed version of your `.github/workflows/format.yml` file:

```yaml name=.github/workflows/format.yml
name: Auto-format

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

env:
  PYTHON_VERSION: "3.12"

jobs:
  auto-format:
    name: Auto-format Code
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' || 
      (github.event_name == 'pull_request' && 
       github.event.pull_request.head.repo.full_name == github.repository)

    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install formatting tools
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit==3.5.0

      - name: Run auto-formatting
        run: |
          echo "Running auto-formatting with project pre-commit config..."
          pre-commit run --all-files || echo "Some files were formatted"

      - name: Check for changes (excluding workflows)
        id: verify-changed-files
        run: |
          CHANGED_FILES=$(git status --porcelain | grep -v "^.* \.github/workflows/" || true)
          
          if [ -n "$CHANGED_FILES" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Non-workflow files were auto-formatted:"
            echo "$CHANGED_FILES"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "No formatting changes needed (excluding workflows)"
          fi

      - name: Commit formatting changes (excluding workflows)
        if: steps.verify-changed-files.outputs.changed == 'true'
        run: |
          echo "Committing non-workflow formatting changes..."
          
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          
          # Stage all changes first
          git add .
          # Remove workflow files from staging
          git reset -- .github/workflows/
          
          if git diff --cached --quiet; then
            echo "No changes to commit after excluding workflows"
            exit 0
          fi
          
          git commit -m "style: auto-format code (excluding workflows) [skip ci]"
          
          BRANCH_NAME="${{ github.head_ref || github.ref_name }}"
          
          for i in {1..3}; do
            echo "Attempt $i to push changes..."
            if git push origin "$BRANCH_NAME"; then
              echo "Successfully pushed formatting changes!"
              break
            elif [ $i -eq 3 ]; then
              echo "Failed to push after 3 attempts"
              exit 1
            else
              echo "Push failed, syncing and retrying..."
              
              # Stash any unstaged changes before syncing
              if ! git diff --quiet || ! git diff --cached --quiet; then
                echo "Stashing local changes..."
                git stash push -m "temp-stash-for-sync"
                STASHED=true
              else
                STASHED=false
              fi
              
              # Fetch latest changes
              git fetch origin "$BRANCH_NAME"
              
              # Try to rebase, fall back to merge if it fails
              if git rebase "origin/$BRANCH_NAME"; then
                echo "Successfully rebased"
              else
                echo "Rebase failed, aborting and trying merge..."
                git rebase --abort
                git merge "origin/$BRANCH_NAME" --no-edit
              fi
              
              # Restore stashed changes if any
              if [ "$STASHED" = true ]; then
                echo "Restoring stashed changes..."
                git stash pop || echo "Warning: Could not restore stashed changes"
              fi
              
              sleep 1
            fi
          done